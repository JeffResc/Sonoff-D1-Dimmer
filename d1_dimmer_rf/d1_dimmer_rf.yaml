# Set variables such as the device's name and friendly name
# The devicename is used internally which the friendly name is shown in the user interface
substitutions:
  devicename: d1_dimmer
  friendly_name: Dimmer

esphome:
  name: $devicename
  platform: ESP8266
  board: esp01_1m
  # Include our custom code
  includes:
    - d1_dimmer_rf.h

# TODO: Set these as your own Wi-Fi credentials
wifi:
  ssid: Jeff
  password: !secret wifi_password
  fast_connect: true
  ap:
    ssid: ESP-${devicename}
    password: !secret fallback_password

captive_portal:

# TODO: Set these as your own web server credentials
web_server:
  port: 80
  auth:
    username: !secret web_username
    password: !secret web_password

# Make sure to disable serial logging as it will interfere with our serial connection
logger:
  baud_rate: 0

# TODO: Set your own API credentials
api:
  password: !secret api_password

# TODO: Set your own OTA credentials
ota:
  password: !secret ota_password
  safe_mode: True

# Uses the onboard LED as status indicator
status_led:
  pin:
    number: GPIO13
    inverted: True

# Report basic device information like it's Wi-Fi signal strength and uptime
sensor:
  - platform: wifi_signal
    name: ${friendly_name} WiFi Signal
    update_interval: 60s
  - platform: uptime
    name: ${friendly_name} Uptime
    filters:
      - lambda: return x / 60.0;
    unit_of_measurement: minutes

# Basic switch to allow you to restart the device remotely
switch:
  - platform: restart
    name: ${friendly_name} Restart

binary_sensor:
  - platform: status
    name: "Sonoff D1 Status"

# Define our custom light component
light:
  - platform: custom
    lambda: |-
      auto dimmer_light = new Sonoff_D1_Dimmer();
      App.register_component(dimmer_light);
      return {dimmer_light};
    lights:
      - name: $friendly_name
        id: main
        restore_mode: RESTORE_DEFAULT_OFF
        gamma_correct: 0
